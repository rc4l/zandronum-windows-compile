name: Build Windows (Latest)

on:
  workflow_dispatch: # Allows you to trigger the workflow manually from the Actions tab

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Write build date badge JSON
        if: ${{ success() }}
        run: |
          $date = Get-Date -Format "yyyy-MM-dd HH:mm"
          $json = "{ `"schemaVersion`": 1, `"label`": `"last build`", `"message`": `"$date UTC`", `"color`": `"blue`" }"
          Set-Content -Path build-date-badge.json -Value $json

      - name: Run Zandronum build script
        shell: pwsh
        run: |
          ./build.ps1

      - name: Basic executable run
        run: |
          Write-Host "Testing executable dependencies with dependency walker style check..."
          
          # Use PowerShell to check DLL dependencies directly
          try {
            # Try to load the executable and see what happens immediately
            $proc = Start-Process -FilePath ".\build\Release\zandronum.exe" -ArgumentList "-iwad","nonexistent.wad" -PassThru -RedirectStandardError ".\error.log" -RedirectStandardOutput ".\output.log" -WindowStyle Hidden
            
            # Give it 3 seconds to fail with DLL error or start initializing
            Start-Sleep -Seconds 3
            
            # Check if process is still running
            if (-not $proc.HasExited) {
              Write-Host "✅ Process started successfully - killing it now"
              $proc.Kill()
              $proc.WaitForExit(5000)
            }
            
            # Check error output for DLL issues
            if (Test-Path ".\error.log") {
              $errorContent = Get-Content ".\error.log" -Raw
              Write-Host "Error output: $errorContent"
              
              if ($errorContent -match "(?i)(libssl|libcrypto|api-ms-|vcruntime|msvcp)" -or
                  $errorContent -match "(?i)(could not|cannot|unable).*(find|load|locate).*(dll|library)" -or
                  $errorContent -match "(?i)missing.*dll") {
                Write-Host "❌ DLL dependency error detected"
                exit 1
              }
            }
            
            if (Test-Path ".\output.log") {
              $outputContent = Get-Content ".\output.log" -Raw
              Write-Host "Standard output: $outputContent"
            }
            
            Write-Host "✅ No DLL dependency errors detected"
            
          } catch {
            Write-Host "❌ Failed to start process: $_"
            exit 1
          } finally {
            # Clean up log files
            Remove-Item ".\error.log" -ErrorAction SilentlyContinue
            Remove-Item ".\output.log" -ErrorAction SilentlyContinue
          }

      - name: Write Zandronum version badge JSON
        if: ${{ success() }}
        run: |
          $tagLine = Get-Content src/zandronum/.hgtags | Where-Object { $_.Trim() -ne "" } | Select-Object -Last 1
          if ($tagLine) {
            $version = $tagLine -split " " | Select-Object -Last 1
          } else {
            $version = "unknown"
          }
          $json = "{ `"schemaVersion`": 1, `"label`": `"zandronum`", `"message`": `"$version`", `"color`": `"orange`" }"
          Set-Content -Path zandronum-version-badge.json -Value $json
      - name: Push badge files to badges branch
        if: ${{ success() }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin badges || true
          git checkout -B badges
          git add build-date-badge.json zandronum-version-badge.json
          git commit -m "Update badges" || exit 0
          Write-Host "Setting remote URL with GITHUB_TOKEN..."
          git remote set-url origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          Write-Host "Pushing to badges branch..."
          git push origin badges --force